// <copyright file="PostOperationcfasms_studenteducationhistoryCreate.cs" company="">
// Copyright (c) 2023 All Rights Reserved
// </copyright>
// <author></author>
// <date>8/16/2023 11:26:43 AM</date>
// <summary>Implements the PostOperationcfasms_studenteducationhistoryCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace StudentManagementSystem.cfasms
{

    /// <summary>
    /// PostOperationcfasms_studenteducationhistoryCreate Plugin.
    /// </summary>    
    public class PostOperationcfasms_studenteducationhistoryCreate: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationcfasms_studenteducationhistoryCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information.</param>
        public PostOperationcfasms_studenteducationhistoryCreate(string unsecure, string secure)
            : base(typeof(PostOperationcfasms_studenteducationhistoryCreate))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// </remarks>
        protected override void ExecuteCdsPlugin(ILocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException(nameof(localContext));
            }           
            // Obtain the tracing service
            ITracingService tracingService = localContext.TracingService;

            try
            { 
                // Obtain the execution context from the service provider.  
                IPluginExecutionContext context = (IPluginExecutionContext)localContext.PluginExecutionContext;

                // Obtain the organization service reference for web service calls.  
                IOrganizationService currentUserService = localContext.CurrentUserService;

                // Implement your custom Plug-in business logic.

                if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
                {
                    tracingService.Trace(PluginClassName + " contains Target and is Entity.");
                    Entity studenteducationhistory = (Entity)context.InputParameters["Target"];
                   
                    // verify that target entity represents student education history table
                    if (studenteducationhistory.LogicalName != "cfasms_studenteducationhistory")
                        return;

                    // Get the last entered student-college id for the assigned institution
                    // only do the work if currently enrolled
                    if (studenteducationhistory.GetAttributeValue<bool>("cfasms_iscurrentlyinprogress"))
                    {
                        Guid studenteducationhistoryId = (Guid)studenteducationhistory["cfasms_studenteducationhistoryid"];
                        EntityReference universityReference = (EntityReference) studenteducationhistory["cfasms_institution"];
                      
                        // Instantiate QueryExpression query
                        var query = new QueryExpression("cfasms_studenteducationhistory")
                        {
                            TopCount = 1,
                            ColumnSet = new ColumnSet("cfasms_name", "cfasms_institution"),
                            Criteria = new FilterExpression
                            {
                                FilterOperator = LogicalOperator.And,
                                Conditions =
                            {
                                new ConditionExpression("cfasms_institution", ConditionOperator.Equal, universityReference.Id),
                                new ConditionExpression("cfasms_name", ConditionOperator.NotNull),
                                new ConditionExpression("cfasms_name", ConditionOperator.NotEqual, "")
                            }
                            },
                            Orders =
                        {
                            new OrderExpression("createdon", OrderType.Descending)
                        }
                        };
                        // Query the last entered college ID
                        EntityCollection result = currentUserService.RetrieveMultiple(query);

                        Entity updateEntity = new Entity("cfasms_studenteducationhistory", studenteducationhistoryId);
                        if (result.Entities.Count > 0)
                        {
                            // assign new id based on last entered id for the given instituion
                            string lastEnteredId = result.Entities[0].GetAttributeValue<string>("cfasms_name");
                            updateEntity["cfasms_name"] = util.createUpdatedId(lastEnteredId);
                            currentUserService.Update(updateEntity);

                        } else
                        {
                            Entity universityEntity = currentUserService.Retrieve("cfasms_institutions", universityReference.Id, new ColumnSet("cfasms_name"));
                            string universityName = universityEntity.GetAttributeValue<string>("cfasms_name");

                            // if an id hasn't been created yet create one
                            updateEntity["cfasms_name"] = util.createNewId(universityName);
                            currentUserService.Update(updateEntity);
                        }
                        
                    }
                }


            }	
            // Only throw an InvalidPluginExecutionException. Please Refer https://go.microsoft.com/fwlink/?linkid=2153829.
            catch (Exception ex)
            {
                tracingService?.Trace(String.Format("An error occurred executing Plugin StudentManagementSystem.cfasms.PostOperationcfasms_studenteducationhistoryCreate : {0}", ex.ToString()));
                throw new InvalidPluginExecutionException("An error occurred executing Plugin StudentManagementSystem.cfasms.PostOperationcfasms_studenteducationhistoryCreate .", ex);
            }	
        }
    }
}
